notebook_version(2)

input = `
&zq -> fd, gk, pp, ph, ss, dr, pl
%qg -> jh, nk
%lm -> lg, qm
%fk -> lr
%pp -> hh
%bf -> sj, qm
&qm -> kb, jl, bs, kx, bl, cz, dd
%db -> dc, jn
%kl -> dc, qv
%xm -> jh
%ss -> zq, nd
%vq -> bh, dc
%bl -> bs
%fd -> gk
&dc -> tx, vq, ct, df, fx
%dj -> zq, pp
%fv -> vj, zq
%pv -> lm, qm
%dg -> zz, jh
%fc -> fk
%qv -> dc, db
&ls -> rx
&tx -> ls
%vl -> fc
%dr -> fd
&dd -> ls
%kx -> jl
%sj -> qm, bl
%vj -> zq
%nk -> jh, vl
%xr -> kr, jh
&nz -> ls
%cz -> bf
%ms -> qm
%ct -> fx
%lg -> qm, ms
%lr -> dg
%pl -> dr
%rt -> zq, dj
%jn -> dc
%zz -> zm
%kf -> kl, dc
%jl -> cz
%hh -> fv, zq
%df -> mr
&jh -> zz, lr, vl, fc, nz, fk, qg
%fx -> hq
%hq -> df, dc
%kb -> qm, kx
&ph -> ls
broadcaster -> kb, vq, ss, qg
%nd -> pl, zq
%gk -> rt
%mr -> dc, kf
%bs -> pv
%bh -> dc, ct
%kr -> jh, xm
%zm -> xr, jh
`



input = input.trim()

dest_to_src = new Map()
modules = new Map()
input = input.split('\n').map((row) => {
    let [key, vals] = row.split(' -> ')
    vals = vals.split(',').map((x) => x.trim())

    let resolved_key
    let kind
    if (key[0] === '&') {
        kind = 'conjunction'
        resolved_key = key.slice(1)
    } else if (key[0] === '%') {
        kind = 'flip'
        resolved_key = key.slice(1)
    } else {
        kind = 'none'
        resolved_key = key
    }
    vals.forEach((dest) => {
        const temp = dest_to_src.get(dest) ?? []
        temp.push(resolved_key)
        dest_to_src.set(dest, temp)
    })
    modules.set(resolved_key, {
        kind,
        dest: vals,
    })
})


sim_pulse = (pulse_ct) => {
    queue = [['button', 'broadcaster', false]]
    for (let i = 0; i < 1000; i++) {
        if (!queue.length) break
        const [src, dest, is_high] = queue.shift()
        // print( src, ` -${is_high ? "high" : "low"}->`, dest)
        if (is_high) {
            high_ct++
        } else {
            low_ct++
        }
        if([...memory.get("ls").values()].some(x =>x)) {
            cycle_obj[pulse_ct]  =  [...memory.get("ls").values()]        
        }

        const cur_mod = modules.get(dest)
        if (cur_mod === undefined) continue
        const cur_mem = memory.get(dest)
        let is_send_high = null
        if (cur_mod.kind === 'flip') {
            if (is_high) continue
            if (typeof cur_mem !== 'boolean') throw new Error('bad')
            memory.set(dest, !cur_mem)
            is_send_high = !cur_mem
        } else if (cur_mod.kind === 'conjunction') {
            cur_mem.set(src, is_high)
            is_send_high = ![...cur_mem.values()].every((x) => x)
        } else {
            is_send_high = is_high
        }
        cur_mod.dest.forEach((next_dest) => {
            queue.push([dest, next_dest, is_send_high])
        })
    }
}


cycle_obj = {}
low_ct = 0
high_ct = 0
memory = new Map()
modules.forEach((value, key) => {
    if (value.kind === 'flip') {
        memory.set(key, false)
    } else if (value.kind === 'conjunction') {
        const temp = new Map()
        dest_to_src.get(key).forEach((src) => {
            temp.set(src, false)
        })
        memory.set(key, temp)
    }
})
for (let i = 0; i <5000; i++) {
    sim_pulse(i)
}


// requires weird observation that inputs to ls occur on independent cycles, independent
// from all other system memory, so just LCM them
print(to_lcm = Object.keys(cycle_obj).slice(0,memory.get("ls").size).map( x=> Number(x) + 1))

lcm_targs = to_lcm

max = Math.max(...to_lcm) * 2

seive = Array(max).fill(true)
seive[1] = false
seive[0] = false
for (let i = 2; i < max; i++) {
    if (!seive[i]) continue
    let cur = i
    while (cur < max) {
        cur+= i
        seive[cur] = false
        // cur += i
    }
}


primes = []
for (let i = 0; i < max; i++) {
    if(seive[i]) primes.push(i)
}

factors = primes.flatMap((p) => {
    let cur = 1
    let ans = undefined
    while (lcm_targs.some((x) => x % p ** (cur) === 0)) {
        ans = cur
        cur++        
    }
    if (ans != undefined) return [p ** ans]
    else return []
})


print(factors)

print(factors.reduce((a,b)=> a*b))
