notebook_version(2)


input = `
    seeds: 79 14 55 13

    seed-to-soil map:
    50 98 2
    52 50 48

    soil-to-fertilizer map:
    0 15 37
    37 52 2
    39 0 15

    fertilizer-to-water map:
    49 53 8
    0 11 42
    42 0 7
    57 7 4

    water-to-light map:
    88 18 7
    18 25 70

    light-to-temperature map:
    45 77 23
    81 45 19
    68 64 13

    temperature-to-humidity map:
    0 69 1
    1 0 69

    humidity-to-location map:
    60 56 37
    56 93 4
`

input = input.trim()

print(arr = input.split(":").slice(1))

arr = arr.map( a => a.split("\n\n")[0].split("\n").map(x => x.trim()).filter(x => x!==""))

print(arr)


to_arr = (str) => {
    const out = str.split(' ').filter(x => x.trim() !== "").map(Number)
    const found = out.find(x => Number.isNaN(x))
    if(found != null) {
        print("bad input: ", str)
    }
    return out.filter(x => !Number.isNaN(x))
}

seeds = to_arr(arr[0][0])

print(seeds)

maps = arr.slice(1)

stages = maps.map(x => x.map(to_arr).sort((x, y) => x[1]- y[1]))

print(stages)


ranges = []
for (let i = 0; i < seeds.length; i += 2) {
    ranges.push([seeds[i], seeds[i] + seeds[i + 1] - 1])
}

print(ranges)

ans = ranges.map((range) => {
    let cur = [range]
    for (stage of stages) {
        let next = []

        for (range of cur) {
            let cur_start = range[0]
            let stop = range[1]

            // Invariant: rules are sorted by start moment, and are non-overlapping
            for (rule of stage) {
                rule_start = rule[1]
                rule_stop = rule[1] + rule[2] - 1
                rule_offset = rule[0] - rule[1]

                const has_overlap =
                    Math.max(cur_start, rule_start) <= Math.min(stop, rule_stop)


                // generally if there is overlap push the mapped overlapping region
                if (has_overlap) {
                    next.push([
                        Math.max(cur_start, rule_start) + rule_offset,
                        Math.min(stop, rule_stop) + rule_offset,
                    ])
                    
                    // the rule is about to mutate the current range
                    // push the non-overlapping region if non-empty
                    const is_start_below_rule = cur_start < rule_start
                    if (is_start_below_rule)
                        next.push([cur_start, rule_start - 1])
                        
                    cur_start = rule_stop + 1
                }

                // if the rule ends after the sequence, no subsequent rules can be relevant 
                const is_last_relevant_rule = rule_stop >= stop 
                if (is_last_relevant_rule) {
                    break
                }
            }
            
            // there's unprocessed range, push it
            if (cur_start <= stop) next.push([cur_start, stop])
        }
        cur = [...next]
    }
    return Math.min(...cur.flatMap((n) => n))
})


ans = Math.min(...ans)

print(ans)
