notebook_version(2)

input = `
    px{a<2006:qkq,m>2090:A,rfg}
    pv{a>1716:R,A}
    lnx{m>1548:A,A}
    rfg{s<537:gd,x>2440:R,A}
    qs{s>3448:A,lnx}
    qkq{x<1416:A,crn}
    crn{x>2662:A,R}
    in{s<1351:px,qqz}
    qqz{s>2770:qs,m<1801:hdj,R}
    gd{a>3333:R,R}
    hdj{m>838:A,pv}

    {x=787,m=2655,a=1222,s=2876}
    {x=1679,m=44,a=2067,s=496}
    {x=2036,m=264,a=79,s=2244}
    {x=2461,m=1339,a=466,s=291}
    {x=2127,m=1623,a=2188,s=1013}
`

input = input.trim()
;[input_rules, items] = input.split('\n\n')

rules = new Map()
input_rules
    .split('\n')
    .map((rule) => rule.trim().split('{'))
    .forEach((rule) => {
        const [key, rest] = rule
        const out = {}
        const frags = rest.slice(0, -1).split(',')

        out['final'] = frags.splice(-1)[0]
        const regex = new RegExp(
            /(?<category>[xmas])(?<direction>.)(?<value>\d+)\:(?<destination>[A-z]+)/g
        )

        out['sub_rules'] = frags
            .map((frag) => regex.exec(frags).groups)
            .map((x) => ({
                ...x,
                is_greater_than: x.direction === '>',
                value: Number(x.value),
            }))
        rules.set(key, out)
    })

split_on_sub_rule = (sub_rule, value) => {
    const key = sub_rule.category
    const [low, high] = value[key]
    if (sub_rule.is_greater_than) {
        return [
            [sub_rule.value + 1, high],
            [low, sub_rule.value],
        ].map((x) => (x[0] <= x[1] ? x : null))
    } else {
        return [
            [low, sub_rule.value - 1],
            [sub_rule.value, high],
        ].map((x) => (x[0] <= x[1] ? x : null))
    }
}

split_on_rule = (name_value) => {
    let out = []
    let [name, value] = name_value
    const rule = rules.get(name)
    for (let sub_rule of rule.sub_rules) {
        const [accept, reject] = split_on_sub_rule(sub_rule, value)

        if (accept !== null) {
            const out_val = { ...value }
            out_val[sub_rule.category] = accept
            out.push([sub_rule.destination, out_val])
        }

        if (reject !== null) {
            value = { ...value }
            value[sub_rule.category] = reject
            out.push(['R', value])
        } else {
            value = null
            break
        }
    }

    if (value !== null) {
        out.push([rule.final, value])
    }
    return out
}

stack = [['in', { x: [1, 4000], m: [1, 4000], a: [1, 4000], s: [1, 4000] }]]
valids = []
while (true) {
    if (!stack.length) break
    const cur_pair = stack.pop()
    const results = split_on_rule(cur_pair)

    results.forEach((result) => {
        const [name, value] = result
        if (name === 'A') {
            valids.push(value)
        } else if (name !== 'R') {
            stack.push(result)
        }
    })
}

ans = valids.map(
    (value) =>
        BigInt(value.x[1] - value.x[0] + 1) *
        BigInt(value.m[1] - value.m[0] + 1) *
        BigInt(value.a[1] - value.a[0] + 1) *
        BigInt(value.s[1] - value.s[0] + 1)
)

print(ans.reduce((a, b) => a + b))
